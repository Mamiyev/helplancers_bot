from typing import Union
from aiogram import types
from aiogram.dispatcher import FSMContext
from asyncpg import UniqueViolationError

from keyboards.inline.acception_of_task import acception_keyboard
from keyboards.inline.delete_task import delete_keyboard, delete_cd
from keyboards.inline.mailing_text import mailing_markup
from keyboards.inline.menu_keyboards_client import categories_keyboard, subcategories_keyboard, menu_cd
from aiogram.types import CallbackQuery
from loader import dp, bot
from states.steps_to_create_task import Task_state
from utils.db_api.db_commands import add_task, update_task_category_code, update_task_subcategory_code, \
    update_task_description, update_task_salary, update_task_category_name, update_task_subcategory_name, get_task, \
    count_tasks, update_current_task, client_id_to_task_id, delete_task, get_all_tasks, get_freelancers, \
    get_all_my_tasks, finish_task, get_client, count_next_task_id
from utils.db_api.schemas.Task_ import Task_


@dp.message_handler(text="üïµ –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")
async def show_menu(message: types.Message):
    id = message.from_user.id
    current_total_tasks = await count_next_task_id()
    await add_task(id=current_total_tasks + 1, client_id=id, category_code="0", subcategory_code="0",
                   category_name="0", subcategory_name="0")
    await update_current_task(id=id, current_task_id=current_total_tasks + 1)
    await Task_state.start.set()
    await list_categories(message)


async def list_categories(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await categories_keyboard()
    if isinstance(message, types.Message):
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=markup)
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_text(text="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=markup)
        id = await client_id_to_task_id(call.from_user.id)
        await update_task_category_code(id=id, category_code="0")


# –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –≤—ã–¥–∞—á–µ inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(menu_cd.filter(), state=Task_state.start)
async def navigate(message: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get('level')
    category = callback_data.get('category')
    subcategory = callback_data.get('subcategory')
    id = await client_id_to_task_id(message.from_user.id)
    levels = {
        "0": list_categories,
        "1": list_subcategories,
    }
    if current_level == '0':
        current_level_function = levels[current_level]
        await current_level_function(message, category=category, subcategory=subcategory)
    if current_level == '1':
        await update_task_category_code(id=id, category_code=category)
        await list_subcategories(call=message, category=category, subcategory=subcategory)
    if current_level == '2':
        await update_task_subcategory_code(id=id, subcategory_code=subcategory)
        await description(message)


async def list_subcategories(call: types.CallbackQuery, category, **kwargs):
    markup = await subcategories_keyboard(category)
    await call.message.edit_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=markup)


async def description(call: types.CallbackQuery):
    await call.message.edit_text(text="‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await Task_state.salary.set()


# –û–±—Ä–∞–±–æ—Ç—á–∫–∏ –¥–ª—è "–¢–ó"
@dp.message_handler(state=Task_state.salary)
async def list_salary(message: types.Message):
    description = message.text
    id = client_id_to_task_id(message.from_user.id)
    await update_task_description(id=id, description=description)
    await message.answer("üí∞–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é  —Ü–µ–Ω—É($):")
    await Task_state.pre_finished.set()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç
@dp.message_handler(state=Task_state.pre_finished)
async def add_new_task(message: types.Message, state: FSMContext):
    id = await client_id_to_task_id(message.from_user.id)

    salary = int(message.text)
    await update_task_salary(id=id, salary=salary)
    task = await get_task(id)

    task_id = task.id
    category = task.category_code
    subcategory = task.subcategory_code
    client_id_freelancer = message.from_user.id

    await state.update_data(category_code=category, subcategory_code=subcategory,
                            id=client_id_freelancer, task_id=task_id)

    # —Ç—É—Ç –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è category_name & subcategory_name
    if task.category_code == "design":
        await update_task_category_name(id=id, category_name="–î–∏–∑–∞–π–Ω")
        if task.subcategory_code == "web":
            await update_task_subcategory_name(id=id, subcategory_name="–í–µ–±-–¥–∏–∑–∞–π–Ω")
        elif task.subcategory_code == "animation":
            await update_task_subcategory_name(id=id, subcategory_name="–ê–Ω–∏–º–∞—Ü–∏–∏")
        elif task.subcategory_code == "logo":
            await update_task_subcategory_name(id=id, subcategory_name="–õ–æ–≥–æ—Ç–∏–ø—ã")
        elif task.subcategory_code == "illustration":
            await update_task_subcategory_name(id=id, subcategory_name="–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏")
        elif task.subcategory_code == "3d":
            await update_task_subcategory_name(id=id, subcategory_name="3–î-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
    elif task.category_code == "marketing":
        await update_task_category_name(id=id, category_name="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥")
        if task.subcategory_code == "inst":
            await update_task_subcategory_name(id=id, subcategory_name="–ò–Ω—Å—Ç–∞–≥—Ä–∞–º")
        elif task.subcategory_code == "vk":
            await update_task_subcategory_name(id=id, subcategory_name="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ")
        elif task.subcategory_code == "tg":
            await update_task_subcategory_name(id=id, subcategory_name="–¢–µ–ª–µ–≥—Ä–∞–º–º")
        elif task.subcategory_code == "fb":
            await update_task_subcategory_name(id=id, subcategory_name="–§–µ–π—Å–±—É–∫")
        elif task.subcategory_code == "seo":
            await update_task_subcategory_name(id=id, subcategory_name="SEO-–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ")
    elif task.category_code == "copywr":
        await update_task_category_name(id=id, category_name="–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥")
        if task.subcategory_code == "posts":
            await update_task_subcategory_name(id=id, subcategory_name="–°—Ç–∞—Ç—å–∏")
        elif task.subcategory_code == "translate":
            await update_task_subcategory_name(id=id, subcategory_name="–ü–µ—Ä–µ–≤–æ–¥—ã")
        elif task.subcategory_code == "seotxt":
            await update_task_subcategory_name(id=id, subcategory_name="SEO-—Ç–µ–∫—Å—Ç—ã")
        elif task.subcategory_code == "sellingtxt":
            await update_task_subcategory_name(id=id, subcategory_name="–ü—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã")
    elif task.category_code == "dev":
        await update_task_category_name(id=id, category_name="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
        if task.subcategory_code == "frontend":
            await update_task_subcategory_name(id=id, subcategory_name="Front-end")
        elif task.subcategory_code == "backend":
            await update_task_subcategory_name(id=id, subcategory_name="Back-end")
        elif task.subcategory_code == "game":
            await update_task_subcategory_name(id=id, subcategory_name="–ò–≥—Ä—ã")
        elif task.subcategory_code == "tgbots":
            await update_task_subcategory_name(id=id, subcategory_name="–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ã")
        elif task.subcategory_code == "landing":
            await update_task_subcategory_name(id=id, subcategory_name="–õ–µ–Ω–¥–∏–Ω–≥")
    elif task.category_code == "other":
        await update_task_category_name(id=id, category_name="–î—Ä—É–≥–æ–µ")
        if task.subcategory_code == "music":
            await update_task_subcategory_name(id=id, subcategory_name="–ú—É–∑—ã–∫–∞")
        elif task.subcategory_code == "video":
            await update_task_subcategory_name(id=id, subcategory_name="–í–∏–¥–µ–æ")
        elif task.subcategory_code == "photo":
            await update_task_subcategory_name(id=id, subcategory_name="–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

    task = await Task_.get(id)
    text = task.__repr__()
    markup = await acception_keyboard(id)
    await message.answer(text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–∞–ª–æ—á–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    await message.answer(text=text, reply_markup=markup)
    await Task_state.finished.set()


@dp.callback_query_handler(text_contains="acception", state=Task_state.finished)
async def mailing(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    id = call.data.split(":")[0]
    result = call.data.split(":")[1]

    if result == "True":
        await call.message.edit_text(text="–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!üëå")
    elif result == "False":
        await delete_task(int(id))
        await call.message.edit_text(text="–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!üëå")
    await Task_state.mailing.set()

    data = await state.get_data()
    category_code = data.get("category_code")

    # –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á—Ç–æ –±—ã –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    # –Ω–æ —è –¥—É–º–∞—é –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–º–µ–∂–Ω—ã–µ, —Ç–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –∑–∞—Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    # subcategory_code = data.get("subcategory_code")

    id = data.get("id")
    task_id = data.get("task_id")

    freelancers = await get_freelancers()
    for freelancer in freelancers:
        if category_code in str(freelancer.category_code):
            task = await get_task(task_id)
            text = task.__repr__()
            markup = await mailing_markup(task_id)
            # –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ –± –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª—Å—è —Å–≤–æ–π –∑–∞–∫–∞
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É –∑–∞–∫–∞–∑—á–∏–∫–µ
                if freelancer.id == call.from_user.id:
                    pass
                else:
                    await bot.send_message(chat_id=freelancer.id, text=text, reply_markup=markup)
            except:
                continue
        else:
            continue
    await state.finish()


@dp.message_handler(text="üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_task(message: types.Message):
    id = message.from_user.id
    task_id = await client_id_to_task_id(id)
    tasks = await get_all_my_tasks(message.from_user.id)
    flag = False
    if not tasks:
        await message.answer("üòê–í—ã –µ—â—ë –Ω–µ –∑–∞–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º")
    else:
        for task in tasks:
            if task.client_id == id:
                if task.status == True:
                    continue
                if task.category_code == "0":
                    continue
                if task.subcategory_code == "0":
                    continue
                if task.category_name == "0":
                    continue
                if task.subcategory_name == "0":
                    continue
                if task.description == "0":
                    continue
                if task.salary == "0":
                    continue
                flag = True
                markup = await delete_keyboard(task.id)
                await message.answer(text=task.__repr__(), reply_markup=markup)
        if not flag:
            await message.answer("üòê–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç")


@dp.callback_query_handler(delete_cd.filter())
async def delete_showing_task(call: CallbackQuery, callback_data: dict):
    id = int(callback_data.get('id'))
    result = callback_data.get('result')
    if result == "scc":
        await finish_task(id)
        await call.message.edit_text(text="–ó–∞–∫–∞–∑  –∑–∞–≤–µ—Ä—à—ë–ΩüòÑ")
    else:
        await delete_task(id)
        await call.message.edit_text(text="–ó–∞–∫–∞–∑  —É–¥–∞–ª—ë–Ωüòî")
