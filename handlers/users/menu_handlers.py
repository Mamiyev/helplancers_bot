import datetime
from unittest.mock import call

from aiogram.dispatcher import FSMContext
from asyncpg import UniqueViolationError

from keyboards.inline.quiz import quiz_keyboard
from loader import dp

from keyboards.default import client_keyboard, menu_keyboard, profi_keyboard
from aiogram.types import Message

from utils.db_api.db_commands import add_freelancer, update_freelancer_name, count_finished_projects, add_client, \
    add_subscription, get_latest_freelancer_subscription, update_client_name


@dp.message_handler(text="üë®‚Äçüíª –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
async def quiz(message: Message):
    subscription = await get_latest_freelancer_subscription(message.from_user.id)

    #–î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        if subscription.end_date:
            if subscription.end_date > datetime.datetime.now():
                await message.answer("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å–ø–æ–∫–æ–π–Ω–æüòÅ",
                                 reply_markup=profi_keyboard)
        else:
            markup = quiz_keyboard
            await message.answer(text="–ù–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å \n"
                                  "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤  "
                                  "–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Å–Ω–æ–≤–Ω–µ. \n"
                                  "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'",
                             reply_markup=markup)
            call.message.delete()
            try:
                await add_freelancer(id=message.from_user.id, name=message.from_user.username)
                await add_subscription(freelancer_id=message.from_user.id, free_trial=True)
            except UniqueViolationError:
                await update_client_name(client_id=message.from_user.id, name=message.from_user.username)
    except:
        markup = quiz_keyboard
        await message.answer(text="–ù–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å \n"
                                  "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤  "
                                  "–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –æ—Å–Ω–æ–≤–Ω–µ. \n"
                                  "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –º–æ–∂–Ω–æ –Ω–∞—á–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'",
                             reply_markup=markup)
        call.message.delete()
        try:
            await add_freelancer(id=message.from_user.id, name=message.from_user.username)
            await add_subscription(freelancer_id=message.from_user.id, free_trial=True)
        except UniqueViolationError:
            pass

    print("quiz handler is executed")


@dp.message_handler(text="üôã‚Äç‚ôÇÔ∏è –ö–ª–∏–µ–Ω—Ç")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ö–ª–∏–µ–Ω—Ç
async def client(message: Message):
    await message.answer(text="–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - '–ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'",
                         reply_markup=client_keyboard)

    try:
        if message.from_user.username is None:
            await message.answer("‚ö†Ô∏è–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π username –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ\n–î–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∫ –í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ —Å–º–æ–≥—É—Ç —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è")
        await add_client(id=message.from_user.id, username=message.from_user.username)
    except UniqueViolationError:
        await update_client_name(client_id=message.from_user.id, name = message.from_user.username)
    call.message.delete()
    print("client handler is executed")


@dp.message_handler(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", state="*")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
async def back(message: Message,state:FSMContext = ""):

    await message.answer(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ '–ö–ª–∏–µ–Ω—Ç' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞  \n"
                         "–ò–ª–∏ –Ω–∞ '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç' –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã",
                         reply_markup=menu_keyboard)
    call.message.delete()
    await state.finish()
    print("back handler is executed")




@dp.message_handler(text="‚Ñπ –û –±–æ—Ç–µ")
async def about(message: Message):
    finished_projects = await count_finished_projects()
    await message.answer(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
                              f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {finished_projects}\n",
                         reply_markup=menu_keyboard)
    call.message.delete()
    print("about handler is executed")
