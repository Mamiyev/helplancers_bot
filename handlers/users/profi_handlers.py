import datetime
from aiogram import types
from typing import Union
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink, hcode
from asyncpg import UniqueViolationError

from data import config
from keyboards.inline import rate_keyboard
from keyboards.inline.menu_keyboard_profi import categories_keyboard, subcategories_keyboard, menu_cd, last_keyboard
from keyboards.inline.paid_keyboard import paid_keyboard
from loader import dp, bot
from aiogram.types import CallbackQuery
from keyboards.default import profi_keyboard

from states.profi_states import Profile, Freelancer as F
from utils.db_api.db_commands import update_freelancer_categories, update_freelancer_bio, \
    update_freelancer_github, update_freelancer_rate, \
    add_freelancer_subscription, update_freelancer_subscription, get_freelancer, \
    get_latest_freelancer_subscription, get_task, get_client
from utils.db_api.schemas.Freelancer_ import Freelancer_
from utils.misc.Qiwi import Payment, NoPaymentFound, NotEnoughMoney


@dp.callback_query_handler(text_contains="freed")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
async def profi(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer(text="üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                                   "üë®‚Äçüíª–≠—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞, –≥–¥–µ —Ç—ã –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏—Å–ø–æ–ª—å–∑—É—è"
                                   "–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\nüíÅ‚Äç‚ôÇÔ∏è–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã, –∞ —Ç–∞–∫–∂–µ —É–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞"
                                   "—Ä–∞–±–æ—Ç—ã. –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã, –≤–µ–¥—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∏",
                              reply_markup=profi_keyboard)
    await call.message.delete()

    # –æ–± –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    today = datetime.date.today()
    now = datetime.datetime.now()
    current_time = datetime.time(now.hour, now.minute, now.second)

    start_time = datetime.datetime.combine(today, current_time)
    print(start_time)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {start_time}")
    id = call.from_user.id
    print(id)
    subscription = datetime.timedelta(days=31)

    end_time = start_time + subscription
    print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {end_time}")
    subscription = await get_latest_freelancer_subscription(call.from_user.id)
    if subscription.free_trial:
        await update_freelancer_subscription(start_date=start_time, end_date=end_time,
                                             freelancer_id=id, free_trial=False)
    else:
        await call.message.answer("–í–∞—à–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é:\n\n"
                                  "üí∂–¢—Ä—É –•–µ–ª–ø–µ—Ä 390 —Ä—É–±–ª–µ–π - 15 –¥–Ω–µ–π \n"
                                  "üí∂–í–∏–ø –•–µ–ª–ø–µ—Ä  790 —Ä—É–±–ª–µ–π - 30 –¥–Ω–µ–π \n"
                                  "üí∂–ü—Ä–µ–º–∏—É–º –•–µ–ª–ø–µ—Ä 1490 —Ä—É–±–ª–µ–π - 90 –¥–Ω–µ–π",
                                  reply_markup=rate_keyboard)
    print("Profi handler is executed")


@dp.callback_query_handler(text_contains="notfree")  # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
async def subsc(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞—Ä–∏—Ñ \n\n"
                                   "üí∂–¢—Ä—É –•–µ–ª–ø–µ—Ä 390 —Ä—É–±–ª–µ–π - 15 –¥–Ω–µ–π \n\n"
                                   "üí∂–í–∏–ø –•–µ–ª–ø–µ—Ä  790 —Ä—É–±–ª–µ–π - 30 –¥–Ω–µ–π \n\n"
                                   "üí∂–ü—Ä–µ–º–∏—É–º –•–µ–ª–ø–µ—Ä 1490 —Ä—É–±–ª–µ–π - 90 –¥–Ω–µ–π",
                              reply_markup=rate_keyboard)


@dp.callback_query_handler(text_contains="topay")
async def paid_subscription(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)

    id = call.message.from_user.id
    days = call.data.split(":")[0]
    sum_to_pay = call.data.split(":")[1]

    payment = Payment(amount=sum_to_pay)
    payment.create()

    markup = await paid_keyboard(id=id, days=days)

    await call.message.edit_text(
        "\n".join(
            [
                f"–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ {sum_to_pay} –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É",
                "",
                hlink(config.WALLET_QIWI, url=payment.invoice),
                "–ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞",
                hcode(payment.id)
            ]
        ),
        reply_markup=markup
    )
    await state.set_state("qiwi")
    await state.update_data(payment=payment)
    print("Subsc handler is executed")


@dp.callback_query_handler(text_contains="cancel_paid", state="qiwi")
async def cancel_payment(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–∫—É–ø–∫—É")
    await state.finish()


@dp.callback_query_handler(text="confirm_paid", state="qiwi")
async def confirm_payment(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    id = call.data.split(":")[-2]
    days = call.data.split(":")[-1]

    payment: Payment = data.get("payment")
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.finish()
        return
    except NotEnoughMoney:
        await call.message.answer("–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π!")
        await state.finish()
        return
    else:
        await call.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–∞")

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –§–†–ò–õ–ê–ù–°–ï–†–ê –≤ —Ç–∞–±–ª–∏—Ü—É —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
    today = datetime.date.today()
    now = datetime.datetime.now()
    current_time = datetime.time(now.hour, now.minute, now.second)

    start_time = datetime.datetime.combine(today, current_time)
    print(start_time)
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {start_time}")

    subscription = datetime.timedelta(days)

    end_time = start_time + subscription
    print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {end_time}")

    try:
        await add_freelancer_subscription(freelancer_id=id, free_trial=False)
    except:
        await update_freelancer_subscription(start_date=start_time, end_date=end_time,
                                             freelancer_id=call.message.from_user.id)

    await call.message.delete_reply_markup()
    await call.message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {end_time}")
    await state.finish()


@dp.message_handler(text_contains="–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ üëÄ", state=None)
async def enter_test(message: types.Message):
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.\n"
                         "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                         "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ - front-end —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –û–ø—ã—Ç 3 –≥–æ–¥–∞\n"
                         "–ù–∞–≤—ã–∫–∏: HTML, CSS, JS, PYTHON")

    await Profile.about.set()


@dp.message_handler(state=Profile.about)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(answer1=answer)

    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É", reply_markup=profi_keyboard)
    await update_freelancer_bio(id=message.chat.id, bio=answer)
    await state.reset_state(with_data=False)


@dp.message_handler(text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üìã")
async def pshow_menu(message: types.Message):
    await plist_categories(message)


async def plist_categories(message: Union[CallbackQuery, Message], **kwargs):
    markup = await categories_keyboard()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message, Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)

    # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_reply_markup(markup)


async def plist_subcategories(callback: CallbackQuery, category, **kwargs):
    markup = await subcategories_keyboard(category)
    await callback.message.edit_reply_markup(markup)


async def show_category_subcategory(callback: CallbackQuery, category, subcategory):
    id = callback.from_user.id
    await update_freelancer_categories(id=callback.message.chat.id,
                                       category_code=category, subcategory_code=subcategory)

    freelancer = await Freelancer_.get(id)
    text = f"""–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {freelancer.category_name}
–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {freelancer.subcategory_name}
        """
    await callback.message.edit_text(text=text)


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get("level")
    category = callback_data.get("category")
    subcategory = callback_data.get("subcategory")

    levels = {
        "0": plist_categories,
        "1": plist_subcategories,
        "2": show_category_subcategory
    }
    if current_level == 2:
        current_level_function = levels[current_level]
        await F.finality.set()
        await current_level_function(call, category=category, subcategory=subcategory)
    else:
        current_level_function = levels[current_level]
        await current_level_function(call, category=category, subcategory=subcategory)


@dp.message_handler(text="–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ üíº")
async def insert_portfolio(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∏—Ç—Ö–∞–± –∞–∫–∫–∞—É–Ω—Ç:")
    await Profile.github.set()


@dp.message_handler(state=Profile.github)
async def answer_q2(message: types.Message, state: FSMContext):
    link = message.text
    await state.update_data(github_link=link)

    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É", reply_markup=profi_keyboard)
    await update_freelancer_github(id=message.chat.id, github=link)
    await state.reset_state(with_data=False)


@dp.message_handler(text="–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –ø—Ä–æ–µ–∫—Ç üíµ")
async def insert_average_salary(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∑–∞ –ø—Ä–æ–µ–∫—Ç (–ï–í–†–û)")
    await Profile.hourly_rate.set()


@dp.message_handler(state=Profile.hourly_rate)
async def answer_q2(message: types.Message, state: FSMContext):
    rate = int(message.text)
    await state.update_data(average_rate=rate)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                         "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É–Ω–∫—Ç—É", reply_markup=profi_keyboard)
    await update_freelancer_rate(id=message.chat.id, hourly_rate=rate)
    await state.reset_state(with_data=False)


@dp.message_handler(text="–°—Ç–∞—Ç—É—Å ‚úÖ")
async def show_repr(message: types.Message):
    freelancer = await Freelancer_.get(message.from_user.id)
    text = freelancer.__repr__()
    if freelancer.name != 'Null':
        if freelancer.category_code != 'Null':
            if freelancer.subcategory_code != 'Null':
                if freelancer.bio != 'Null':
                    if freelancer.average_salary != 'Null':
                        if freelancer.github != 'Null':
                            text += '\n‚úÖ–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã '
                        else:
                            text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                    else:
                        text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
                else:
                    text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
            else:
                text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
        else:
            text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'
    else:
        text += '\nüõë–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã'

    await message.answer(text)


@dp.message_handler(state=F.finality)
async def finall(state: FSMContext):
    await state.finish()


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict):
    current_level = callback_data.get("level")
    category = callback_data.get("category")
    subcategory = callback_data.get("subcategory")

    levels = {
        "0": plist_categories,
        "1": plist_subcategories,
        "2": show_category_subcategory
    }
    if current_level == 2:
        current_level_function = levels[current_level]
        await F.finality.set()
        await current_level_function(call, category=category, subcategory=subcategory)
    else:
        current_level_function = levels[current_level]
        await current_level_function(call, category=category, subcategory=subcategory)


# –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ - –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ username –∑–∞–∫–∞–∑—á–∏–∫–∞
@dp.callback_query_handler(text_contains="gtff")
async def get_task_from_freelancer(call: CallbackQuery):
    subscription_of_freelancer = await get_latest_freelancer_subscription(call.from_user.id)
    freelancer = await get_freelancer(call.from_user.id)
    task_id = int(call.data.split(":")[-1])
    task = await get_task(task_id)

    client = await get_client(task.client_id)

    text = str(task.__repr__()) + f"\n@{client.username}"

    today = datetime.date.today()
    now = datetime.datetime.now()
    current_time = datetime.time(now.hour, now.minute, now.second)
    now_time = datetime.datetime.combine(today, current_time)

    text_for_client = "üòâ–í–∞—à –∑–∞–∫–∞–∑ –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\n" + freelancer.__repr__() + f"\n@{freelancer.name}"
    # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞:
    if subscription_of_freelancer.end_date > now_time:
        await call.message.answer(text=text)
        await bot.send_message(chat_id=client.id, text=text_for_client)
    else:
        await call.message.answer(
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í–∞–º —Å—Ç–æ–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë", reply_markup=rate_keyboard)
